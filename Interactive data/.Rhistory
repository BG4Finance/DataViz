Price_call<- S*exp(-d*dt) * pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
return(Price_call)
}
P <- function(S, K, r, sigma, dt=1, d=0) { #d=Dividend yield, dt=Maturity as fraction of the year
d1  <-  (log(S/K) + (r - d + (sigma^2)/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_put<- K*exp(-r*dt)*pnorm(-d2) - S*exp(-d*dt) * pnorm(-d1)
return(Price_put)
}
C(St,K,r,sigma,t)
#Montecarlo
prices<-function (St, Tau, r, sigma, npaths, nsteps){
dt<-Tau/nsteps
n<-npaths*nsteps
epsilon<-matrix(rnorm(n), byrow = T, ncol = npaths, nrow = nsteps)
epsilon[,1]<-0
evolution<-function(x){St * cumprod(exp((r - 0.5*sigma^2) * dt + sigma * sqrt(dt) * x))}
result<-apply(epsilon, 2, evolution)
return(result)
}
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
#Binomial Three
#Probability of an up movement
prob<-function(r,dt,sigma){
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
pricing<-((exp(r*dt)-d)/(u-d))
return(pricing)
}
#Bulding binary three
build_stock_tree <- function(S, sigma, dt, N) {
tree <- matrix(0, nrow=N+1, ncol=N+1)
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i,j] <- S * u^(j-1) * d^((i-1)-(j-1))
}
}
return(tree)
}
tree<-build_stock_tree(St,sigma,dt,TTM)
tree
#Once we built the binary tree, starting from the latest payoff, we evaluing present values of put price
#But first we have to estimate the value of the option...
option_valuation<-function(tree,sigma,dt,r,K,type='call') {
q<-prob(r,dt,sigma)
optionchain<-matrix(0,nrow = nrow(tree),ncol = ncol(tree))
if(type=='put'){
optionchain[nrow(optionchain),] <- pmax(K-tree[nrow(tree),],0)
}
if(type=='call') {
optionchain[nrow(optionchain),] <- pmax(tree[nrow(tree),]-K,0)
}
for (i in (nrow(tree)-1):1) {
for (j in 1:i) {
optionchain[i,j] <- ((1-q)*optionchain[i+1,j]+q*optionchain[i+1,j+1])/exp(r*1/252)
}
}
return(optionchain)
}
#...and then pricing it
binomialpricing <- function(type,sigma,T,r,K,St,N){
q<-prob(r,i,sigma)
tree<-build_stock_tree(St,sigma,i,N)
option<-option_valuation(tree,sigma,i,r,K,type)
return(price=option[1,1])
}
binomialpricing('call',sigma,Tau,r,K,St,N)
P(St,K,r,sigma,t)
put_values <-  pmax(K-forecasted,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
put_pre_val <- exp(-r*dt)*put_values  # discounting under the risk-neutral assumption
pPV <- mean(put_pre_val)   # taking the average to obtain the put_value
pPV
ecdf(forecasted)
binomialpricing('call',sigma,Tau,r,K,St,N)
binomialpricing('put',sigma,Tau,r,K,St,N)
library("OptionPricing", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
BlackScholesPricing('put',91.2,81,0.02,0.2,0.3,0)
BlackScholesPricing('put',157,170,0.02,0.15,0.5,0)
x <- (2,5,3,9,11,8,6)
count <- 0
for (val in x){
if (val %% 2 == 0)
count <- count+1
print(count)
}
x <- (2,5,3,9,11,8,6)
x <- c(2,5,3,9,11,8,6)
count <- 0
for (val in x){
if (val %% 2 == 0)
count <- count+1
print(count)
}
n <- c(1,2,3,4,5,6,7,8,9,0)
k <- 2
for (k in n){
print()
}
for (u in 1:3){
print(u)
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
letter <- c('A','B','C')
letter <- c('A','B','C')
for (u in 1:3) {
for (v in 1:3) {
print(paste0(letter[u],letter[v]))
}
}
letter <- c('A','B','C')
for (u in 1:length(letter)) {
for (v in 1:length(letter)) {
print( paste0(letter[u],letter[v]) )
}
}
for (u in 1:length(letter)) {
for (v in 1:length(letter)) {
for (w in 1:length(letter)) {
print( paste0(letter[u],letter[v],letter[w]) )
}
}
}
##super short
expand.grid(letter,letter)
expand.grid(letter,letter,letter)
library("OptionPricing", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
BlackScholesPricing('put',1000,1100,0.0175,0.15,0.3)
AveragePricing('put',1000,1100,0.0175,0.15,0,75,1)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175,10000)
library("rsconnect")
install.packages('rsconnect')
install.packages("rsconnect")
successfully in R, that computer is now authorized to deploy applications to your shinyapps.io account.
rsconnect::setAccountInfo(name='bg4fin',
token='584590DA1401C5CA4F08022B3A48A224',
secret='REd1qpnQJYULqW0IQvsc+u6dCfkWbmTZryzt9OqO')
q()
shiny::runApp('Desktop/DATA VIZ/Shiny and html/Grades')
setwd("~/Desktop/DATA VIZ/Shiny and html/Grades")
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
counties <- read.csv("Grades.csv")
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
counties <- read.csv("Grades.csv")
library(shiny)
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
counties <- read.csv("Grades.csv")
counties <- read.csv("Grades.csv")
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
counties <- read.csv("Grades.csv")
View(counties)
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
counties <- read.csv("Grades.csv", sep = ";")
View(counties)
runApp('~/Desktop/DATA VIZ/TEACHINO HKT/shiny-apps-pg/Merging test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("G. Bardi's Grades of last 8 semsters"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
radioButtons("course","University Course",
c("Bachelor"="bac", "Master"="mas", "All"="all"),
selected = "all"),
conditionalPanel(condition = "input$course == 'all'",
sliderInput("semester",
"Semester Range:",
min = 1,
max = 8,
value = c(1,8)))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
)
setwd("~/Documents/GitHub/DataViz/Interactive data")
View(counties)
runApp()
runApp('~/Desktop/DATA VIZ/TEACHINO HKT/shiny-apps-pg/Merging test')
runApp('~/Documents/GitHub/DataViz/Interactive data')
runApp('~/Documents/GitHub/DataViz/Interactive data')
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
grades <- read.csv("Grades.csv", sep = ";")
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
grades <- read.csv("Grades.csv", sep = ";")
grades <- read.csv("Grades.csv", sep = ";")
grades <- read.csv("Grades.csv", sep = ";")
setwd("~/Documents/GitHub/DataViz/Interactive data")
library(ggplot2)
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
setwd("~/Documents/GitHub/DataViz/Interactive data")
grades <- read.csv("Grades.csv", sep = ";")
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("G. Bardi's Grades of last 8 semsters"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
radioButtons("course","University Course",
c("Bachelor"="bac", "Master"="msc", "All"="all"),
selected = "all"),
br(),
conditionalPanel(condition = "input.course == 'msc'",
sliderInput("semester",
"Semester Range:",
min = 1,
max = 8,
value = c(7,8))),
conditionalPanel(condition = "input.course == 'bac'",
sliderInput("semester",
"Semester Range:",
min = 1,
max = 8,
value = c(1,6))),
conditionalPanel(condition = "input.course == 'all'",
sliderInput("semester",
"Semester Range:",
min = 1,
max = 8,
value = c(1,8)))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary"))
)
)
)
)
grades <- read.csv("Grades.csv", sep = ";")
"Grades.csv", sep = ";"
"Grades.csv", sep = ";"
("Grades.csv", sep = ";")
("Grades.csv", sep = ";")
grades <- read.csv("Grades.csv", sep = ";")
grades <- read.csv("Grades.csv", sep = ";")
runApp()
#Graphic test for grades
library(ggplot2)
graph <- function(grades = grades) {
}
graph <- function(grades = grades) {
result<-ggplot(grades)
return(result)
}
graph(grades)
View(grades)
grades[47]
grades[47,]
grades[c(47:55),3]
graph(grades[c(47:54),3])
#Graphic test for grades
library(ggplot2)
graph <- function(x) {
result<-ggplot(x)
return(result)
}
graph(grades[c(47:54),c(1,3)])
semester <-  graph(grades[c(47:54),1])
avg <-  graph(grades[c(47:54),3])
semester <-  grades[c(47:54),1]
avg <- grades[c(47:54),3]
entry <- data.frame(semseter, avg)
entry <- data.frame(semester, avg)
graph(entry)
ggplot(entry, aes(semester,avg))
View(entry)
ggplot(entry, aes(semester,avg)) +
geom_point(data = avg, colour = 'red', size = 3)
ggplot(entry, aes(semester,avg)) +
geom_point(colour = 'red', size = 3)
ggplot(entry, aes(semester,avg)) +
geom_abline(colour = 'red', size = 3)
ggplot(entry, aes(semester,avg)) +
scatter.smooth(colour = 'red', size = 3)
ggplot(entry, aes(semester,avg)) +
geom_path(colour = 'red', size = 3)
ggplot(entry, aes(semester,avg)) +
geom_line(colour = 'red', size = 3)
ggplot(entry, aes(x=semester, y=avg)) +
geom_point(shape=18, color="blue")+
geom_smooth(method=lm,  linetype="dashed",
color="darkred", fill="blue")
ggplot(entry, aes(x=semester, y=avg)) +
geom_point(shape=18, color="blue")
ggplot(entry, aes(x=semester, y=avg)) +
geom_line(color="red")+
geom_point()
ggplot(entry, aes(x=semester, y=avg)) +
geom_line(color="red")+
geom_point()
ggplot(entry, aes(x=semester, y=avg)) +
geom_line(color="red")
no
ggplot(entry, aes(x=semester, y=avg)) +
geom_line(color="red", aes(semester,avg))
ggplot(entry, aes(x=semester, y=avg)) +
geom_line(color="red", aes(x=semester,y=avg))
ggplot(entry, aes(x=semester, y=avg)) +
geom_path()+
geom_point()
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_path()+
geom_point()
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")
geom_point(colour="black", size=3)
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")+
geom_point(colour="black", size=5)
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="red")+
geom_point(colour="black", size=3)
ggplot(entry, aes(x=semester, y=avg, group=1))+
geom_line(color="red")+
geom_point(colour="black", size=2)
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="cyan") +
geom_point(colour="black", size=2)
ggplot(entry, aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
ggplot(entry[c(1,5),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
ggplot(entry[c(1:5),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
ggplot2(entry[c(1:5),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
runApp()
print(c(2:4))
runApp()
runApp()
runApp()
runApp()
i <- 3
f <- 8
ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
i <- 3
f <- 8
ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
i <- 2
f <- 8
ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
runApp()
graph <- function(entry,i,f) {
result<-ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
return(result)
}
graph(entry,i,f)
graph(entry,i,f)
graph <- function(entry,i,f) {
result<-ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
return(result)
}
i <- 2
f <- 8
graph(entry,i,f)
#Graphic test for grades
library(ggplot2)
semester <-  grades[c(47:54),1]
avg <- grades[c(47:54),3]
entry <- data.frame(semester, avg)
#setwd("~/YOUR PATH TO THE FOLDER/Grades")
setwd("~/Documents/GitHub/DataViz/Interactive data")
grades <- read.csv("Grades.csv", sep = ";")
semester <-  grades[c(47:54),1]
avg <- grades[c(47:54),3]
entry <- data.frame(semester, avg)
graph <- function(entry,i,f) {
result <-g gplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
return(result)
}
inizio <- 2
fine <- 8
graph(entry,i,f)
fine <- 6
graph(entry,i,f)
graph(entry,inizio,fine)
graph <- function(entry,i,f) {
result <-ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
return(result)
}
inizio <- 2
fine <- 6
graph(entry,inizio,fine)
semester <-  grades[c(47:54),1]
avg <- grades[c(47:54),3]
entry <- data.frame(semester, avg)
graph(entry,inizio,fine)
grades <- read.csv("Grades.csv", sep = ";")
semester <-  grades[c(47:54),1]
avg <- grades[c(47:54),3]
entry <- data.frame(semester, avg)
graph <- function(entry,i,f) {
result <-ggplot(entry[c(i:f),], aes(x=semester, y=avg, group=1)) +
geom_line(color="blue") +
geom_point(colour="black", size=2)
return(result)
}
inizio <- 2
fine <- 6
graph(entry,inizio,fine)
runApp()
runApp()
runApp('~/Desktop/DATA VIZ/TEACHINO HKT/shiny-apps-pg/Merging test')
runApp('~/Documents/GitHub/DataViz/Interactive data')
runApp('~/Documents/GitHub/DataViz/Interactive data')
runApp()
runApp()
runApp()
runApp()
# Define UI for random distribution app ----
ui <- fluidPage(
# App title ----
titlePanel("G. Bardi's Grades of last 8 semsters"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar inputs ----
sidebarPanel(
radioButtons("course","University Course",
c("Bachelor"="bac", "Master"="msc", "All"="all"),
selected = "all"),
br(),
sliderInput("semester",
"Semester Range:",
min = 1,
max = 8,
value = c(1,8))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
plotOutput("plot")
)
)
)
shiny::runApp()
