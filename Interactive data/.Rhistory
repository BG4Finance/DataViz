result<-apply(epsilon, 2, evolution)
return(result)
}
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
put_values <-  pmax(K-forecasted,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
put_pre_val <- exp(-r*dt)*put_values  # discounting under the risk-neutral assumption
pPV <- mean(put_pre_val)   # taking the average to obtain the put_value
pPV
#Binomial Three
#Probability of an up movement
prob<-function(r,dt,sigma){
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
pricing<-((exp(r*dt)-d)/(u-d))
return(pricing)
}
i<-1/252 #Market activity day
#Binomial Three
#Probability of an up movement
prob<-function(r,i,sigma){
u <- exp(sigma*sqrt(i))
d <- exp(-sigma*sqrt(i))
pricing<-((exp(r*i)-d)/(u-d))
return(pricing)
}
#Bulding binary three
build_stock_tree <- function(S, sigma, i, N) {
tree <- matrix(0, nrow=N+1, ncol=N+1)
u <- exp(sigma*sqrt(i))
d <- exp(-sigma*sqrt(i))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i,j] <- S * u^(j-1) * d^((i-1)-(j-1))
}
}
return(tree)
}
tree<-build_stock_tree(St,sigma,i,TTM)
tree
View(tree)
#Once we built the binary tree, starting from the latest payoff, we evaluing present values of put price
#But first we have to estimate the value of the option...
option_valuation<-function(tree,sigma,i,r,K,type) {
q<-prob(r,i,sigma)
optionchain<-matrix(0,nrow = nrow(tree),ncol = ncol(tree))
if(type=='put'){
optionchain[nrow(optionchain),] <- pmax(K-tree[nrow(tree),],0)
} else {
optionchain[nrow(optionchain),] <- pmax(tree[nrow(tree),]-K,0)
}
for (i in (nrow(tree)-1):1) {
for (j in 1:i) {
optionchain[i,j] <- ((1-q)*optionchain[i+1,j]+q*optionchain[i+1,j+1])/exp(r*dt)
}
}
return(optionchain)
}
#...and then pricing it
binomialpricing <- function(type,sigma,T,r,K,St,N){
q<-prob(r,i,sigma)
tree<-build_stock_tree(St,sigma,i,N)
option<-option_valuation(tree,sigma,i,r,K,type)
return(list(q=q,stock=tree,option=option,price=option[1,1]))
}
binomialpricing('put',sigma,Tau,r,K,St,N)
binomialpricing('call',sigma,Tau,r,K,St,N)
library(readr)
AMZN <- read_csv("Desktop/MSc 2/Programming in finance/AMZN.csv")
View(AMZN)
Price<-AMZN$`Price`
Price_Return<-diff(log(Price))
r<-0.0174                     #To Download automatically
sigma<-sqrt(var(excess_Return))*sqrt(TTM)
K<-1740
St <- AMZN$`Price`[1]
Tau <- 1 #Simulation lenght ('MonteCarlo')
dt<-50
t <- dt/252
i<-1/252 #Market activity day
N<-dt
TTM<-length(AMZN$Price)  #Days observed
excess_Return<-Price_Return-r
sigma<-sqrt(var(excess_Return))*sqrt(TTM)
#Montecarlo simulation Put pricing
prices<-function (St, Tau, r, sigma, npaths, nsteps){
dt<-Tau/nsteps
n<-npaths*nsteps
epsilon<-matrix(rnorm(n), byrow = T, ncol = npaths, nrow = nsteps)
epsilon[,1]<-0
evolution<-function(x){St * cumprod(exp((r - 0.5*sigma^2) * dt + sigma * sqrt(dt) * x))}
result<-apply(epsilon, 2, evolution)
return(result)
}
pric<-as.data.frame(prices(St, Tau, r, sigma, 1000, TTM))
Pricedyn<-matplot(pric, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
dim(pric)
price<-as.numeric(c(pric[nrow(pric),]))
price
ecdf(price)
plot.stepfun(price)
my_quantile <- function(price) {
if (is.unsorted(x)) x <- sort(x)
n <- length(x)
approx(seq(0, 1, length = n), x, prob)$y
}
option_values <-  pmax(K-price,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
present_vals <- exp(-r*T)*option_values  # discounting under the risk-neutral assumption
f <- mean(present_vals)   # taking the average to obtain the put_value
present_vals
option_values
f
option_values <-  pmax(price-k,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
?apply
Price<-AMZN$`Price`
Price_Return<-diff(log(Price))
r<-0.0174                     #To Download automatically
sigma<-sqrt(var(excess_Return))*sqrt(TTM)
K<-1740
St <- AMZN$`Price`[1]
Tau <- 1 #Simulation lenght ('MonteCarlo')
dt<-50
t <- dt/252
i<-1/252 #Market activity day
N<-dt
TTM<-length(AMZN$Price)  #Days observed
excess_Return<-Price_Return-r
C <- function(S, K, r, sigma, dt=1, d=0) {
d1  <-  (log(S/K) + (r - d + sigma^2/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_call<- S*exp(-d*dt) * pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
return(Price_call)
}
P <- function(S, K, r, sigma, dt=1, d=0) { #d=Dividend yield, dt=Maturity as fraction of the year
d1  <-  (log(S/K) + (r - d + (sigma^2)/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_put<- K*exp(-r*dt)*pnorm(-d2) - S*exp(-d*dt) * pnorm(-d1)
return(Price_put)
}
C(St,K,r,sigma,t)
P(St,K,r,sigma,t)
dt<-46
C(St,K,r,sigma,t)
#Montecarlo
prices<-function (St, Tau, r, sigma, npaths, nsteps){
dt<-Tau/nsteps
n<-npaths*nsteps
epsilon<-matrix(rnorm(n), byrow = T, ncol = npaths, nrow = nsteps)
epsilon[,1]<-0
evolution<-function(x){St * cumprod(exp((r - 0.5*sigma^2) * dt + sigma * sqrt(dt) * x))}
result<-apply(epsilon, 2, evolution)
return(result)
}
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
#Binomial Three
#Probability of an up movement
prob<-function(r,dt,sigma){
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
pricing<-((exp(r*dt)-d)/(u-d))
return(pricing)
}
#Bulding binary three
build_stock_tree <- function(S, sigma, dt, N) {
tree <- matrix(0, nrow=N+1, ncol=N+1)
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i,j] <- S * u^(j-1) * d^((i-1)-(j-1))
}
}
return(tree)
}
tree<-build_stock_tree(St,sigma,dt,TTM)
tree
#Once we built the binary tree, starting from the latest payoff, we evaluing present values of put price
#But first we have to estimate the value of the option...
option_valuation<-function(tree,sigma,dt,r,K,type='call') {
q<-prob(r,dt,sigma)
optionchain<-matrix(0,nrow = nrow(tree),ncol = ncol(tree))
if(type=='put'){
optionchain[nrow(optionchain),] <- pmax(K-tree[nrow(tree),],0)
}
if(type=='call') {
optionchain[nrow(optionchain),] <- pmax(tree[nrow(tree),]-K,0)
}
for (i in (nrow(tree)-1):1) {
for (j in 1:i) {
optionchain[i,j] <- ((1-q)*optionchain[i+1,j]+q*optionchain[i+1,j+1])/exp(r*1/252)
}
}
return(optionchain)
}
#...and then pricing it
binomialpricing <- function(type,sigma,T,r,K,St,N){
q<-prob(r,i,sigma)
tree<-build_stock_tree(St,sigma,i,N)
option<-option_valuation(tree,sigma,i,r,K,type)
return(price=option[1,1])
}
binomialpricing('call',sigma,Tau,r,K,St,N)
t <- dt/252
i<-1/252 #Market activity day
N<-dt
TTM<-length(AMZN$Price)  #Days observed
excess_Return<-Price_Return-r
C <- function(S, K, r, sigma, dt=1, d=0) {
d1  <-  (log(S/K) + (r - d + sigma^2/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_call<- S*exp(-d*dt) * pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
return(Price_call)
}
P <- function(S, K, r, sigma, dt=1, d=0) { #d=Dividend yield, dt=Maturity as fraction of the year
d1  <-  (log(S/K) + (r - d + (sigma^2)/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_put<- K*exp(-r*dt)*pnorm(-d2) - S*exp(-d*dt) * pnorm(-d1)
return(Price_put)
}
C(St,K,r,sigma,t)
P(St,K,r,sigma,t)
#Montecarlo
prices<-function (St, Tau, r, sigma, npaths, nsteps){
dt<-Tau/nsteps
n<-npaths*nsteps
epsilon<-matrix(rnorm(n), byrow = T, ncol = npaths, nrow = nsteps)
epsilon[,1]<-0
evolution<-function(x){St * cumprod(exp((r - 0.5*sigma^2) * dt + sigma * sqrt(dt) * x))}
result<-apply(epsilon, 2, evolution)
return(result)
}
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
put_values <-  pmax(K-forecasted,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
put_pre_val <- exp(-r*dt)*put_values  # discounting under the risk-neutral assumption
pPV <- mean(put_pre_val)   # taking the average to obtain the put_value
pPV
ecdf(forecasted)
plot.stepfun(forecasted)
#Binomial Three
#Probability of an up movement
prob<-function(r,dt,sigma){
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
pricing<-((exp(r*dt)-d)/(u-d))
return(pricing)
}
#Bulding binary three
build_stock_tree <- function(S, sigma, dt, N) {
tree <- matrix(0, nrow=N+1, ncol=N+1)
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i,j] <- S * u^(j-1) * d^((i-1)-(j-1))
}
}
return(tree)
}
tree<-build_stock_tree(St,sigma,dt,TTM)
tree
#Once we built the binary tree, starting from the latest payoff, we evaluing present values of put price
#But first we have to estimate the value of the option...
option_valuation<-function(tree,sigma,dt,r,K,type='call') {
q<-prob(r,dt,sigma)
optionchain<-matrix(0,nrow = nrow(tree),ncol = ncol(tree))
if(type=='put'){
optionchain[nrow(optionchain),] <- pmax(K-tree[nrow(tree),],0)
}
if(type=='call') {
optionchain[nrow(optionchain),] <- pmax(tree[nrow(tree),]-K,0)
}
for (i in (nrow(tree)-1):1) {
for (j in 1:i) {
optionchain[i,j] <- ((1-q)*optionchain[i+1,j]+q*optionchain[i+1,j+1])/exp(r*1/252)
}
}
return(optionchain)
}
#...and then pricing it
binomialpricing <- function(type,sigma,T,r,K,St,N){
q<-prob(r,i,sigma)
tree<-build_stock_tree(St,sigma,i,N)
option<-option_valuation(tree,sigma,i,r,K,type)
return(price=option[1,1])
}
binomialpricing('call',sigma,Tau,r,K,St,N)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
AMZN <- read_csv("Downloads/AMZN.csv")
View(AMZN)
#Upload Amazon historical data (from yahoo finance or chang the first row "AMZN$'(Adj close price column')
#in Rstudio calling the dataset "AMZN"
Price<-AMZN$`Adj Close`
Price<-AMZN$`Price`
Price_Return<-diff(log(Price))
r<-0.0174                     #To Download automatically
K<-1740
St <- AMZN$`Price`[1]
Tau <- 1 #Simulation lenght ('MonteCarlo')
dt<-46
t <- dt/252
i<-1/252 #Market activity day
N<-dt
TTM<-length(AMZN$Price)  #Days observed
excess_Return<-Price_Return-r
sigma<-sqrt(var(excess_Return))*sqrt(TTM)
K<-1800
dt<-67
t <- dt/252
N<-dt
C(St,K,r,sigma,t)
C <- function(S, K, r, sigma, dt=1, d=0) {
d1  <-  (log(S/K) + (r - d + sigma^2/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_call<- S*exp(-d*dt) * pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
return(Price_call)
}
P <- function(S, K, r, sigma, dt=1, d=0) { #d=Dividend yield, dt=Maturity as fraction of the year
d1  <-  (log(S/K) + (r - d + (sigma^2)/2)*dt) / (sigma*sqrt(dt))
d2  <-  d1 - sigma*sqrt(dt)
Price_put<- K*exp(-r*dt)*pnorm(-d2) - S*exp(-d*dt) * pnorm(-d1)
return(Price_put)
}
C(St,K,r,sigma,t)
#Montecarlo
prices<-function (St, Tau, r, sigma, npaths, nsteps){
dt<-Tau/nsteps
n<-npaths*nsteps
epsilon<-matrix(rnorm(n), byrow = T, ncol = npaths, nrow = nsteps)
epsilon[,1]<-0
evolution<-function(x){St * cumprod(exp((r - 0.5*sigma^2) * dt + sigma * sqrt(dt) * x))}
result<-apply(epsilon, 2, evolution)
return(result)
}
forecasted<-as.data.frame(prices(St, Tau, r, sigma, 1000, dt))
Pricedyn<-matplot(forecasted, type = c("l"), pch = 1, col = 1:1000, xlab = "steps", ylab = "Stock price",  main = "Dinamica dei prezzi")
forecasted<-as.numeric(forecasted[nrow(forecasted),])
call_values <- pmax(forecasted-K,0)
call_pre_val <-exp(-r*dt)*call_values
cPV <- mean(call_pre_val)
cPV
#Binomial Three
#Probability of an up movement
prob<-function(r,dt,sigma){
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
pricing<-((exp(r*dt)-d)/(u-d))
return(pricing)
}
#Bulding binary three
build_stock_tree <- function(S, sigma, dt, N) {
tree <- matrix(0, nrow=N+1, ncol=N+1)
u <- exp(sigma*sqrt(dt))
d <- exp(-sigma*sqrt(dt))
for (i in 1:(N+1)) {
for (j in 1:i) {
tree[i,j] <- S * u^(j-1) * d^((i-1)-(j-1))
}
}
return(tree)
}
tree<-build_stock_tree(St,sigma,dt,TTM)
tree
#Once we built the binary tree, starting from the latest payoff, we evaluing present values of put price
#But first we have to estimate the value of the option...
option_valuation<-function(tree,sigma,dt,r,K,type='call') {
q<-prob(r,dt,sigma)
optionchain<-matrix(0,nrow = nrow(tree),ncol = ncol(tree))
if(type=='put'){
optionchain[nrow(optionchain),] <- pmax(K-tree[nrow(tree),],0)
}
if(type=='call') {
optionchain[nrow(optionchain),] <- pmax(tree[nrow(tree),]-K,0)
}
for (i in (nrow(tree)-1):1) {
for (j in 1:i) {
optionchain[i,j] <- ((1-q)*optionchain[i+1,j]+q*optionchain[i+1,j+1])/exp(r*1/252)
}
}
return(optionchain)
}
#...and then pricing it
binomialpricing <- function(type,sigma,T,r,K,St,N){
q<-prob(r,i,sigma)
tree<-build_stock_tree(St,sigma,i,N)
option<-option_valuation(tree,sigma,i,r,K,type)
return(price=option[1,1])
}
binomialpricing('call',sigma,Tau,r,K,St,N)
P(St,K,r,sigma,t)
put_values <-  pmax(K-forecasted,0)    # Evaluate the Put option options. (S_T - k) to obtain a Call
put_pre_val <- exp(-r*dt)*put_values  # discounting under the risk-neutral assumption
pPV <- mean(put_pre_val)   # taking the average to obtain the put_value
pPV
ecdf(forecasted)
binomialpricing('call',sigma,Tau,r,K,St,N)
binomialpricing('put',sigma,Tau,r,K,St,N)
library("OptionPricing", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
BlackScholesPricing('put',91.2,81,0.02,0.2,0.3,0)
BlackScholesPricing('put',157,170,0.02,0.15,0.5,0)
x <- (2,5,3,9,11,8,6)
count <- 0
for (val in x){
if (val %% 2 == 0)
count <- count+1
print(count)
}
x <- (2,5,3,9,11,8,6)
x <- c(2,5,3,9,11,8,6)
count <- 0
for (val in x){
if (val %% 2 == 0)
count <- count+1
print(count)
}
n <- c(1,2,3,4,5,6,7,8,9,0)
k <- 2
for (k in n){
print()
}
for (u in 1:3){
print(u)
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
for (u in 1:3){
for (v in 1:3) {
print( c(u,v) )
}
}
letter <- c('A','B','C')
letter <- c('A','B','C')
for (u in 1:3) {
for (v in 1:3) {
print(paste0(letter[u],letter[v]))
}
}
letter <- c('A','B','C')
for (u in 1:length(letter)) {
for (v in 1:length(letter)) {
print( paste0(letter[u],letter[v]) )
}
}
for (u in 1:length(letter)) {
for (v in 1:length(letter)) {
for (w in 1:length(letter)) {
print( paste0(letter[u],letter[v],letter[w]) )
}
}
}
##super short
expand.grid(letter,letter)
expand.grid(letter,letter,letter)
library("OptionPricing", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
BlackScholesPricing('put',1000,1100,0.0175,0.15,0.3)
AveragePricing('put',1000,1100,0.0175,0.15,0,75,1)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175)
MonteCarloPricing('put',1000,1100,75,0.15,0.0175,10000)
library("rsconnect")
install.packages('rsconnect')
install.packages("rsconnect")
successfully in R, that computer is now authorized to deploy applications to your shinyapps.io account.
rsconnect::setAccountInfo(name='bg4fin',
token='584590DA1401C5CA4F08022B3A48A224',
secret='REd1qpnQJYULqW0IQvsc+u6dCfkWbmTZryzt9OqO')
q()
shiny::runApp('Documents/GitHub/DataViz/Interactive data')
setwd("~/Documents/GitHub/DataViz/Interactive data")
shiny::runApp()
